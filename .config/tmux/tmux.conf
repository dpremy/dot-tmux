# --------------------------------------
# tmux version detection for config file
# Based on https://stackoverflow.com/a/40902312
# TMUX_VERSION will always be set to 0+version number
# --------------------------------------
# OpenBSD doesn't support 'tmux -V' so we will get version number and prepend a 0 so that bc always has a number to work with
run-shell 'tmux setenv -g TMUX_VERSION 0$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

# ------------------------------
# utf8 for tmux < 2.2
# > 2.2 errors if explicitly set
# ------------------------------
if-shell -b '[ "$(echo "${TMUX_VERSION} < 2.2" | bc)" = 1 ]' \
  "set -gq utf8; \
   set -gwq utf8 on; \
   set -gq status-utf8 on; \
   set -gq mouse-utf8 on"

# ----------------
# terminal options
# ----------------
set -gs default-terminal "screen-256color"                              # default terminal for new windows created in sessions
set-option -ga terminal-overrides ",screen-256color,xterm-256color:Tc"  # add overrides to make sure we get 256 color

# environment variables to be copied into the session environment when a new session
# is created or an existing session is attached includes TERM variable of terminal emulator
set -g update-environment 'DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY TERM'


# -----------------------------
# install tmux plugins with tpm
# -----------------------------
# list of plugins (use prefix + I to install, prefix + U to update)
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-cpu'

if "test ! -d ~/.tmux/plugins/tpm" \
  "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"

if "test ! -d ~/.tmux/plugins/tmux-cpu" \
  "run 'git clone https://github.com/tmux-plugins/tmux-cpu ~/.tmux/plugins/tmux-cpu'"

# -----------------------------
# plugin configurations
# -----------------------------
# load catppuccin theme
run '~/.config/tmux/plugins/tmux/catppuccin.tmux'

set -g   @plugin 'catppuccin/tmux'
set -g   @catppuccin_flavor 'frappe'
set -g   @catppuccin_window_status_style 'none'
set -ogq @catppuccin_window_flags 'text'
set -g   @catppuccin_window_number_position 'left'

# round cpu and memory usage to digits to conserve space
set -g @cpu_percentage_format "%1d"
set -g @ram_percentage_format "%1d"

# ------------------------
# windows style and format
# ------------------------
set -g window-status-format " #I#{?#{m:window*,#{window_name}},,:#W} "
set -g window-status-style "fg=#{@thm_surface_1}"
set -g window-status-activity-style "bg=#{@thm_yellow},fg=#{@thm_bg}"
set -g window-status-bell-style "bg=#{@thm_yellow},fg=#{@thm_bg},bold"
set -gF window-status-separator "#[fg=#{@thm_overlay_0}]│"
set -g window-status-current-format " #I#{?#{m:window*,#{window_name}},,:#W} "
set -g window-status-current-style "bg=#{@thm_teal},fg=#{@thm_bg},bold"

# ---------------------------------
# left and right status line format
# ---------------------------------
# clear the left status for a fresh start
set -g status-left ""
# check the current tmux prefix or copy mode, and display the proper text and changing colors, much like vim modes
set -ga status-left "#[bg=#{@thm_maroon},fg=#{@thm_mantle}#{?client_prefix, bold] PREFIX #[bg=#{@thm_surface_2}]#[fg=#{@thm_maroon}],#[fg=#{@thm_mantle}]#{?#{==:#{pane_mode},copy-mode},#[bg=#{@thm_peach}]#[fg=#{@thm_mantle} bold] COPY   #[bg=#{@thm_surface_2}]#[fg=#{@thm_peach}],#[bg=#{@thm_blue},fg=#{@thm_mantle}, bold] NORMAL #[bg=#{@thm_surface_2}]#[fg=#{@thm_blue}]}}"
# show the session number or name
set -ga status-left "#[bg=#{@thm_surface_2}] #S #[bg=#{@thm_surface_1}]"
# show the window and pane numbers
set -ga status-left "#[bg=#{@thm_surface_1}] #I:#{?pane_synchronized,#[fg=#{@thm_red}]#[fg=#{@thm_blue}],#P} #[bg=#{@thm_surface_0}]#[fg=#{@thm_overlay_0}]"
# show the running command, and if the current pane is zoomed
set -ga status-left " #{pane_current_command}#{?#{&&:#{window_zoomed_flag},1},Z,}"

# os based status icon with color
# https://nerdfonts.com/ configuration of status bar to show os icon next to hostname
if-shell -b '[ "$(uname -s | grep -i linux)" ]' \
  'os_icon=" "'
if-shell -b '[ "$(cat /etc/*-release | grep -i -e '^id=' | grep -i nixos)" ]' \
  'os_icon="#[fg=colour39] "'
if-shell -b '[ "$(cat /etc/*-release | grep -i -e '^id=' | grep -i fedora)" ]' \
  'os_icon="#[fg=colour19] "'
if-shell -b '[ "$(cat /etc/*-release | grep -i -e '^id=' | grep -i centos)" ]' \
  'os_icon="#[fg=colour93] "'
if-shell -b '[ "$(cat /etc/*-release | grep -i -e '^id=' | grep -i rhel)" ]' \
  'os_icon="#[fg=red] "'
if-shell -b '[ "$(cat /etc/*-release | grep -i -e '^id=' | grep -i ubuntu)" ]' \
  'os_icon="#[fg=colour202] "'
if-shell -b '[ "$(cat /etc/*-release | grep -i -e '^id=' | grep -i debian)" ]' \
  'os_icon="#[fg=colour198] "'
if-shell -b '[ "$(cat /etc/*-release | grep -i -e '^id=' | grep -i slackware)" ]' \
  'os_icon="#[fg=colour63] "'
if-shell -b '[ "$(cat /etc/*-release | grep -i -e '^id=' | grep -i raspbian)" ]' \
  'os_icon="#[fg=colour198] "'
if-shell -b '[ "$(cat /etc/*-release | grep -i -e '^id=' | grep -i alpine)" ]' \
  'os_icon="#[fg=colour18] "'

# show cpu (plugin), os icon (if avail in nerd font) & short hostname, session name, window & pane number (shows red sync icon from ner font if in synced panes), date, time
# clear the right status for a fresh start
set -g status-right ""
# use the cpu plugin to get the current cpu and ram usage
set -g status-right "#[#{cpu_fg_color}]#{cpu_percentage}:#{ram_percentage}#[fg=white] "
# os icon and hostname
set -ag status-right "#[bg=#{@thm_surface_1}] #{os_icon}#[fg=cyan]#{=15:host_short}#[fg=white] "
# date and time. note that %l is always 2 chars wide, even when the hour is <10
set -ag status-right "#[bg=#{@thm_surface_2}] #[fg=yellow]%Y-%m-%d#[fg=green] %l:%M %p"

# ----------------------
# pane and title options
# ----------------------
set -g set-titles on                                                  # turn on client terminal title
set -g set-titles-string "#h#{?#{m:window*,#{window_name}}, (#{pane_current_command}), (#W:#{pane_current_command})}"  # set client terminal title to hostname (no domain), the window name if set, and current command
set -g pane-border-format "┤#{pane_index} #{pane_current_command}├"   # pane title format

# ------------------------------------
# automatic window and pane management
# ------------------------------------
set -g base-index 1                                         # base index to 1 for quicker main window access (default 0)
set -g renumber-windows on                                  # when a window is closed in a session, automatically renumber the other windows in numerical order
set -gw pane-base-index 1                                   # base index to 1 (default 0)
set -gw automatic-rename on                                 # attempt to rename windows based on command currently running
set -g automatic-rename-format "window"
set -gw aggressive-resize on                                # if using a grouped session or multi-monitor setup turn on the aggressive re-sizing for panes

# --------------------------
# custom prefix and bindings
# --------------------------
set -g prefix `                                             # set ` (tic) as the default prefix key combination
bind ` send-prefix                                          # use send-prefix to pass ` (tic) through to application
set -sg escape-time 75                                      # shorten command delay

# session management
bind   '$'    command-prompt -I "#"S "rename-session '%%'"  # prefix $ to rename the current session
bind    d               detach-client                       # prefix d to detach current client from session
bind    D               choose-client                       # prefix D to choose a client to detach
bind    s               choose-tree                         # prefix s to list sessions the client can be attached to
bind -r "("             switch-client -p                    # prefix ( switches tmux client to previous session
bind -r ")"             switch-client -n                    # prefix ) switches tmux client to next session

# window management
bind -r c               new-window                          # prefix c creates new window
bind    r     command-prompt -I "#"W "rename-window '%%'"   # prefix r renames the current window
bind    k  confirm-before -p "kill-window #W? (y/n)" kill-window # prefix k kills the current window
bind -r p               previous-window                     # prefix p selects next window
bind -r n               next-window                         # prefix n selects previous window
bind    L               last-window                         # prefix L selects last active window
bind    w               choose-window                       # prefix w lists windows
bind    f               command-prompt "find-window '%%'"   # prefix f finds a window by name
bind    F               swap-window -t 1                    # prefix F to make the current window the first window
bind    0               select-window -t :=0                # prefix 0 selects window by number
bind    1               select-window -t :=1                # prefix 1 selects window by number
bind    2               select-window -t :=2                # prefix 2 selects window by number
bind    3               select-window -t :=3                # prefix 3 selects window by number
bind    4               select-window -t :=4                # prefix 4 selects window by number
bind    5               select-window -t :=5                # prefix 5 selects window by number
bind    6               select-window -t :=6                # prefix 6 selects window by number
bind    7               select-window -t :=7                # prefix 7 selects window by number
bind    8               select-window -t :=8                # prefix 8 selects window by number
bind    9               select-window -t :=9                # prefix 9 selects window by number
bind -r "<"             swap-window -t -1                   # prefix < to move the window one position to the left
bind -r ">"             swap-window -t +1                   # prefix > to move the window one position to the right

# pane management
bind -r |               split-window -h                     # prefix | to split window horizontally
bind -r -               split-window -v                     # prefix - to split vertically
bind -r "{"             swap-pane -U                        # prefix { to swap the active pane with the previous pane
bind -r "}"             swap-pane -D                        # prefix } to swap the active pane with the next pane
bind -r Left            select-pane -L                      # prefix arrow key select panes
bind -r Right           select-pane -R                      # prefix arrow key select panes
bind -r Up              select-pane -U                      # prefix arrow key select panes
bind -r Down            select-pane -D                      # prefix arrow key select panes
bind    S               set-window-option synchronize-panes # prefix S to synchronize all panes input
bind    h               select-layout even-horizontal       # prefix h for even-horizontal arrangement
bind    v               select-layout even-vertical         # prefix v for even-vertical arrangement
bind -r Space           next-layout                         # prefix space changes pane layout to next default layout
bind    l               last-pane                           # prefix l toggles to last active pane
bind   "#"              display-panes                       # prefix # displays pane numbers
bind    z               resize-pane -Z                      # prefix z toggle pane zoom
bind   "!"              break-pane                          # prefix ! breaks current pane in to new window

# prefix M clears the marked pane
# prefix m visually marks the current pane
if-shell -b '[ "$(echo "${TMUX_VERSION} >= 2.1" | bc)" = 1 ]' \
  "bind    M               select-pane -M; \
   bind    m               select-pane -m"
if-shell -b '[ "$(echo "${TMUX_VERSION} >= 0" | bc)" = 1 ]' \
  "bind    M               select-pane -M; \
   bind    m               select-pane -m"

bind    x confirm-before -p "kill-pane #P? (y/n)" kill-pane # prefix x closes the current pane
bind -r C-Up            resize-pane -U                      # prefix ctrl arrows adjust pane size by 1
bind -r C-Down          resize-pane -D                      # prefix ctrl arrows adjust pane size by 1
bind -r C-Left          resize-pane -L                      # prefix ctrl arrows adjust pane size by 1
bind -r C-Right         resize-pane -R                      # prefix ctrl arrows adjust pane size by 1
bind -r M-Up            resize-pane -U 5                    # prefix alt arrows adjust pane size by 5
bind -r M-Down          resize-pane -D 5                    # prefix alt arrows adjust pane size by 5
bind -r M-Left          resize-pane -L 5                    # prefix alt arrows adjust pane size by 5
bind -r M-Right         resize-pane -R 5                    # prefix alt arrows adjust pane size by 5

# copy mode
bind    Escape          copy-mode                           # prefix Esc to enter copy mode, similar to esc in vim going to normalmode
bind    PPage           copy-mode -u                        # prefix PgUp to enter copy mode and scroll up one page
bind -T copy-mode-vi v  send-keys -X begin-selection        # prefix v to enter selection mode
bind -T copy-mode-vi y  send-keys -X copy-selection         # prefix y to yank selected text
bind    B               list-buffers                        # prefix b to list all stored buffers
bind    b               choose-buffer                       # prefix B to list all stored buffers and paste selected
bind    p               paste-buffer                        # prefix P to paste the current buffer of text

# misc
bind    :               command-prompt                      # prefix : enters tmux command mode
bind    t               clock-mode                          # prefix t shows the time in the current pane
bind    R  source-file ~/.config/tmux/tmux.conf \; display "Reloaded!"  # prefix R reloads ~/.tmux.conf

# help
bind    ?               list-keys                           # show all tmux shortcut keys

# ------------------------------
# remove unused default bindings
# ------------------------------
unbind   C-b                                                # send the prefix key (C-b) through to the application
unbind   C-o                                                # rotate the panes in the current window forwards
unbind   C-z                                                # suspend the tmux client
unbind   '"'                                                # split the current pane into two, top and bottom
unbind   "%"                                                # split the current pane into two, left and right
unbind   "&"                                                # kill the current window
unbind   "'"                                                # prompt for a window index to select
unbind   "."                                                # prompt for an index to move the current window
unbind    o                                                 # select the next pane in the current window.
unbind   \;                                                 # move to the previously active pane
unbind    =                                                 # choose which buffer to paste interactively from a list
unbind   M-1                                                # arrange panes in even-horizontal layout
unbind   M-2                                                # arrange panes in even-vertical layout
unbind   M-3                                                # arrange panes in main-horizontal layout
unbind   M-4                                                # arrange panes in main-vertical layout
unbind   M-5                                                # arrange panes in tiled layout
unbind   M-n                                                # move to the next window with a bell or activity marker
unbind   M-o                                                # rotate the panes in the current window backwards
unbind   M-p                                                # move to the previous window with a bell or activity marker

# ----------------------
# mouse control for tmux
# ----------------------
# turn off mouse for tmux < 2.1
if-shell -b '[ "$(echo "${TMUX_VERSION} < 2.1" | bc)" = 1 ]' \
  "set -gq mode-mouse off"
# turn off mouse for tmux >= 2.1
if-shell -b '[ "$(echo "${TMUX_VERSION} >= 2.1" | bc)" = 1 ]' \
  "set -gq mouse off"

# --------------------
# copy and choice mode
# --------------------
set -gw mode-keys vi                                        # use vi style key bindings in copy and choice mode

# ------------------
# misc color options
# ------------------
set -gw clock-mode-colour colour64                          # set the clock color to green

# -----------------
# misc tmux options
# -----------------
set -g display-time 4000                                              # set tmux messages to be shown for 4 seconds
set -g display-panes-time 4000                                        # set pane number display to be shown for 4 seconds
set -g history-limit 30000                                            # set scroll back history to 30000 entries

# focus events enabled for terminals that support them
if-shell -b '[ "$(echo "${TMUX_VERSION} >= 1.8" | bc)" = 1 ]' "set -g focus-events on"
if-shell -b '[ "$(echo "${TMUX_VERSION} >= 0" | bc)" = 1 ]' "set -g focus-events on"

# ------------------
# status bar options
# ------------------
set -g status on                                            # turn the status bar on
set -gq status-utf8 on                                      # set utf-8 for the status bar, required for tmux < 2.2
set -g status-interval 10                                   # set update frequency (default 15 seconds)
set -g status-justify centre                                # center window list
set -g status-left-length 40                                # set the status bar left length
set -g status-right-length 55                               # set the status bar right length
set -g visual-activity off                                  # do not display status line message of activity in other windows
set -g status-keys vi                                       # use vi style key bindings in the status line and command prompt
set -gw monitor-activity on                                 # enable monitoring of activity in windows

# ----------------------
# hook commands
# ---------------------
# https://man.openbsd.org/OpenBSD-current/man1/tmux.1#FORMATS

set-hook -g window-layout-changed 'set-window -F pane-border-status "#{?#{==:#{window_panes},1},off,top}"'  # per pane titles on top only when >1 panes in a window

# initialize tpm (keep this line at the very bottom of tmux.conf)
if-shell -b '[ "$(echo "${TMUX_VERSION} >= 1.9" | bc)" = 1 ]' "run -b '~/.tmux/plugins/tpm/tpm'"
if-shell -b '[ "$(echo "${TMUX_VERSION} == 0" | bc)" = 1 ]' "run -b '~/.tmux/plugins/tpm/tpm'"